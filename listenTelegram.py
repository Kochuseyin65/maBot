from telethon import TelegramClient, events
import telegram.ext
import telegram

import okx.Trade as Trade
import okx.MarketData as MarketData
import okx.Account as Account
import okx.MarketData as MarketData
import okx.PublicData as PublicData
import time


api_key = 'f1fa9974-3e01-4e45-96f1-29390dea9872'
secret_key = 'E982D22FF4E82880FD9DFDE29D99ED74'
passphrase = '2006Hsyn..'

leverage = "10"

position = {"coin": "", "side": ""}

flag = "0"  # live trading: 0, demo trading: 1

marketDataAPI = MarketData.MarketAPI(flag=flag)
accountAPI = Account.AccountAPI(api_key, secret_key, passphrase, False, flag)
tradeAPI = Trade.TradeAPI(api_key, secret_key, passphrase, False, flag="0")

result = accountAPI.set_position_mode(
    posMode="long_short_mode"
)

ticker = marketDataAPI.get_ticker(
    instId="XRP-USDT-SWAP"
)


    

def get_adjusted_contract_size(usdt_amount, coin_pair, precision):
    # EnstrÃ¼man detaylarÄ±nÄ± al
    instrument_details = accountAPI.get_instruments(instType="SWAP", instId=f"{coin_pair}-USDT-SWAP")
    
    if not instrument_details:
        raise ValueError(f'EnstrÃ¼man bulunamadÄ±: {coin_pair}-USDT-SWAP')
    
    # Lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼nÃ¼ ve sÃ¶zleÅŸme deÄŸerini al

    print(instrument_details)
    lot_size = float(instrument_details["data"][0]['lotSz'])  # Lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼
    contract_value = float(instrument_details["data"][0]['ctVal'])  # SÃ¶zleÅŸme deÄŸeri
    
    # Piyasa fiyatÄ±nÄ± al
    ticker = marketDataAPI.get_ticker(f'{coin_pair}-USDT-SWAP')
    price = float(ticker["data"][0]['last'])

    # Dolar cinsinden sÃ¶zleÅŸme deÄŸeri
    dollar_value_per_contract = contract_value * price

    # KaÃ§ sÃ¶zleÅŸme gerektiÄŸini hesaplayÄ±n
    contract_size = usdt_amount / dollar_value_per_contract
    print(lot_size)

    # Lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼ne gÃ¶re sÃ¶zleÅŸme miktarÄ±nÄ± ayarlayÄ±n
    adjusted_contract_size = max(round(contract_size / lot_size) * lot_size, lot_size)

    adjusted_contract_size = round(adjusted_contract_size, precision)

    print(f'AyarlanmÄ±ÅŸ SÃ¶zleÅŸme MiktarÄ±: {adjusted_contract_size}')

    return adjusted_contract_size

# Ã–rnek kullanÄ±m
# adjusted_contract_size = get_adjusted_contract_size(120, 'XRP', 6)
# print(f'AyarlanmÄ±ÅŸ SÃ¶zleÅŸme MiktarÄ±: {adjusted_contract_size}')

# def usdt_to_contract_and_place_order(usdt_amount, coin_pair):
#     # EnstrÃ¼man detaylarÄ±nÄ± al
#     instrument_details = accountAPI.get_instruments(instType= "SWAP", instId = "XRP-USDT-SWAP")
    
#     if not instrument_details:
#         raise ValueError(f'EnstrÃ¼man bulunamadÄ±: {coin_pair}-USDT-SWAP')
    
#     # Lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼nÃ¼ ve sÃ¶zleÅŸme deÄŸerini al
#     print(instrument_details)
#     lot_size = float(instrument_details["data"][0]['lotSz'])  # Lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼
#     contract_value = float(instrument_details["data"][0]['ctVal'])  # SÃ¶zleÅŸme deÄŸeri
    
#     # Piyasa fiyatÄ±nÄ± al
#     ticker = marketDataAPI.get_ticker(instId=f'{coin_pair}-USDT-SWAP')
#     print(ticker)
#     print("mlmds")
#     price = float(ticker["data"][0]["last"])

#     # Dolar cinsinden sÃ¶zleÅŸme deÄŸeri
#     dollar_value_per_contract = contract_value * price
#     print(f'Her sÃ¶zleÅŸmenin dolar karÅŸÄ±lÄ±ÄŸÄ±: {dollar_value_per_contract} USDT')

#     # KaÃ§ sÃ¶zleÅŸme gerektiÄŸini hesaplayÄ±n
#     contract_size = usdt_amount / dollar_value_per_contract

#     # Lot bÃ¼yÃ¼klÃ¼ÄŸÃ¼ne gÃ¶re sÃ¶zleÅŸme miktarÄ±nÄ± yuvarlayÄ±n
#     adjusted_contract_size = round(contract_size / lot_size) * lot_size
#     print(f'USDT cinsinden {usdt_amount} iÃ§in ayarlanmÄ±ÅŸ sÃ¶zleÅŸme sayÄ±sÄ±: {adjusted_contract_size}')

#     print(adjusted_contract_size)
    

#     # Long pozisyon aÃ§ma iÅŸlemi
#     order = tradeAPI.place_order(
#         instId=f'{coin_pair}-USDT-SWAP',
#         tdMode='cross',
#         side='buy',
#         posSide="long",
#         ordType='market',
#         sz=str(int(adjusted_contract_size)),
#     )

#     return order

# # Ã–rnek kullanÄ±m
# order_response = usdt_to_contract_and_place_order(80, 'XRP')
# print(order_response)

# def usdt_to_contract(usdt, coin):           

#     ticker = marketDataAPI.get_ticker(
#     instId=f"{coin}-USDT-SWAP"
#     )

#     usdtprice = float(ticker["data"][0]["last"])

#     instrument_details = accountAPI.get_instruments(instType="SWAP", instId="XRP-USDT-SWAP")

#     # SÃ¶zleÅŸme deÄŸerini Ã§ekin
#     contract_value =  instrument_details["data"][0]["ctVal"] # SÃ¶zleÅŸme deÄŸeri
#     contract_currency =  instrument_details["data"][0]["ctValCcy"]# SÃ¶zleÅŸme deÄŸeri cinsinden para birimi
#     dollar_value_per_contract = usdtprice * float(contract_value)
#     dollar_amount = usdt
#     contract_size = dollar_amount / dollar_value_per_contract

#     contract_size = round(contract_size)

#     return round(contract_size, 1) 

def open_long(price, lev, coin, levMode):
    print("long")

    max_leverage = int(accountAPI.get_instruments(instType="SWAP", instId= f"{coin}-USDT-SWAP")["data"][0]["lever"])

    if lev < max_leverage or lev == max_leverage:
        lev = lev
    elif lev > max_leverage:
        lev = max_leverage

    leverage = accountAPI.set_leverage(
    instId=f"{coin}-USDT-SWAP",
    lever=f"{lev}",
    mgnMode=f"{levMode}"
    )
    contract_size = get_adjusted_contract_size(price, f'{coin}', 6)
    print(contract_size)
    
    order = tradeAPI.place_order(
    instId=f'{coin}-USDT-SWAP',
    posSide= "long",
    tdMode='cross',
    side='buy',
    ordType='market',
    sz= contract_size,
    ccy="USDT"
    )
    print(order)


async def open_short(price, lev, coin, levMode):
    print("short")

    max_leverage = int(accountAPI.get_instruments(instType="SWAP", instId= f"{coin}-USDT-SWAP")["data"][0]["lever"])

    if lev < max_leverage or lev == max_leverage:
        lev = lev
    elif lev > max_leverage:
        lev = max_leverage

    leverage = accountAPI.set_leverage(
    instId=f"{coin}-USDT-SWAP",
    lever=f"{lev}",
    mgnMode=f"{levMode}"
    )
    print(leverage)

    contract_size = get_adjusted_contract_size(price, f'{coin}', 6)
    print(contract_size)
    
    order = tradeAPI.place_order(
    instId=f'{coin}-USDT-SWAP',
    posSide= "short",
    tdMode=f'{levMode}',
    side='sell',
    ordType='market',
    sz= contract_size,
    ccy="USDT"
    )
    print(order)
    await send_message("@jsklurt", "Yeni short iÅŸlem, Baba")

def close_position(coin, levMode):

    global position

    print(coin)

    print("close")
    result = tradeAPI.close_positions(
    instId=f"{coin["coin"]}-USDT-SWAP",
    mgnMode=f"{levMode}",
    ccy= "USDT",
    autoCxl= True,
    posSide=coin["side"]
    )

    print(result)

# close_position("GAS", "cross")
# print(accountAPI.get_positions())


# Telegram API kimlik bilgilerinizi girin
api_id = '26229331'
api_hash = '1e4f5b538a909f7bf073581cd3040171'
phone_number = '+905528986800'  # Telegram'a kayÄ±tlÄ± telefon numaranÄ±z

# Dinlemek istediÄŸiniz kanalÄ±n adÄ± veya ID'si
channel_name_or_id = '@jsklurt'

# Belirli bir kullanÄ±cÄ±nÄ±n user_id'si veya username'i
target_user_id = 'hedef_kullanÄ±cÄ±_id_veya_username'

async def send_message(user_id, message):
    try:
        await client.send_message(user_id, message)
        print(f"Mesaj gÃ¶nderildi: {message}")
    except Exception as e:
        print(f"Mesaj gÃ¶nderilirken hata oluÅŸtu: {e}")


# Telegram istemcisi oluÅŸturun
client = TelegramClient('session_name', api_id, api_hash)

# Belirli bir kiÅŸiden mesaj geldiÄŸinde Ã§alÄ±ÅŸacak fonksiyon
async def maBot(message):
    print(f"maBot fonksiyonu Ã§aÄŸrÄ±ldÄ±: {message.message}")
    global position
    m = message.message
    print(type(m))

    if "USDT" in m:
        
        coin = m[2 : m.index("USDT")]
        print(coin)

       
        
        if "ğŸŸ£" in m:
            print("sell")
            side = "sell"
            await open_short(10, 10, coin, "cross")
            position["coin"] = coin
            position["side"] = "short"

        elif "ğŸŸ¢" in m:
            print("buy")
            side = "buy"
            open_long(10, 10, coin, "cross")
            position["coin"] = coin
            position["side"] = "long"


    elif "KapattÄ±m." in m:
        print(position)
        
        close_position(position, "cross")
        position["coin"] = ""
        position["side"] = ""

    elif "ekleme" in m:
        if position["side"] == "short":
            open_short(10, 10, position["coin"], "cross")
        if position["side"] == "long":
            open_long(10, 10, position["coin"], "cross")

    

async def main():
    # Telegram'a giriÅŸ yapÄ±n
    await client.start(phone_number)

    # KanalÄ± dinlemek iÃ§in event handler ekleyin
    @client.on(events.NewMessage(chats=channel_name_or_id))
    async def handler(event):
        # if event.message.sender_id == target_user_id:
        #     # Belirtilen kullanÄ±cÄ±dan gelen mesaj bulundu, maBot fonksiyonunu Ã§aÄŸÄ±r


        await send_message('@userinfobot', 'Merhaba! Bu bir test mesajÄ±dÄ±r.')
        await maBot(event.message)
        print("mesaj")


    # Ä°stemciyi sÃ¼rekli Ã§alÄ±ÅŸÄ±r durumda tut
    await client.run_until_disconnected()

with client:
    client.loop.run_until_complete(main())
